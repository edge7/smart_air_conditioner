// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package smart_air_conditioner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureServiceClient interface {
	// Methods
	GetTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TemperatureResponse, error)
	GetModelResult(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelResponse, error)
}

type temperatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureServiceClient(cc grpc.ClientConnInterface) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) GetTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TemperatureResponse, error) {
	out := new(TemperatureResponse)
	err := c.cc.Invoke(ctx, "/myservice.TemperatureService/GetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) GetModelResult(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelResponse, error) {
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, "/myservice.TemperatureService/GetModelResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureServiceServer is the server API for TemperatureService service.
// All implementations must embed UnimplementedTemperatureServiceServer
// for forward compatibility
type TemperatureServiceServer interface {
	// Methods
	GetTemperature(context.Context, *Empty) (*TemperatureResponse, error)
	GetModelResult(context.Context, *ModelRequest) (*ModelResponse, error)
	mustEmbedUnimplementedTemperatureServiceServer()
}

// UnimplementedTemperatureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemperatureServiceServer struct {
}

func (UnimplementedTemperatureServiceServer) GetTemperature(context.Context, *Empty) (*TemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (UnimplementedTemperatureServiceServer) GetModelResult(context.Context, *ModelRequest) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelResult not implemented")
}
func (UnimplementedTemperatureServiceServer) mustEmbedUnimplementedTemperatureServiceServer() {}

// UnsafeTemperatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureServiceServer will
// result in compilation errors.
type UnsafeTemperatureServiceServer interface {
	mustEmbedUnimplementedTemperatureServiceServer()
}

func RegisterTemperatureServiceServer(s grpc.ServiceRegistrar, srv TemperatureServiceServer) {
	s.RegisterService(&TemperatureService_ServiceDesc, srv)
}

func _TemperatureService_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myservice.TemperatureService/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).GetTemperature(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_GetModelResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).GetModelResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myservice.TemperatureService/GetModelResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).GetModelResult(ctx, req.(*ModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemperatureService_ServiceDesc is the grpc.ServiceDesc for TemperatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemperatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myservice.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemperature",
			Handler:    _TemperatureService_GetTemperature_Handler,
		},
		{
			MethodName: "GetModelResult",
			Handler:    _TemperatureService_GetModelResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
